                        ;
                        ;*******************************************************************
                        ;
                        ;**************  Original Version *********************************
                        ;* Small/Shell: Version 1.0
                        ;*              A command processor for North Star DOS
                        ;*
                        ;* Copyright    1981  J. E. Hendrix
                        ;*              All rights reserved
                        ;
                        ;* Written for PDS assembler
                        ;*************  TMS 9900 Version  *******************************************
                        ;
                        ;	SHELL VER 4.0.00
                        ;	FOR THE TMS9900 SERIES COMPUTER
                        ;	MODERN REVS	
                        ;	01. ADDED FILENAME EXTENSION HANDLING 4 JUNE 2010
                        ;	02  ADDED INTERNAL COMMANDS, DIR, SAVE, ERA
                        ;	04  LOAD ADDRESS HEADER ADDED SO MODULES CAN BE LOADED IN OTHER MEMORY SEGMENTS
                        ;
                        ;	SHELL VER 4.0
                        ;	ALIGN VERSIONS WITH BDOS ETC UP TO VERSION 4
                        ;
                        ;*********************************************************************
                        ;
  0000                  R0	EQU	0
  0001                  R1	EQU	1
  0002                  R2	EQU	2
  0003                  R3	EQU	3
  0004                  R4	EQU	4
  0005                  R5	EQU	5
  0006                  R6	EQU	6
                        ;R7	EQU	7   CAN'T USE R7 AS IT IS RESERVED
  0008                  R8	EQU	8
  0009                  R9	EQU	9
  000A                  R10	EQU	10
  000B                  R11	EQU	11
  000C                  R12	EQU	12
  000D                  WP	EQU	13
  000E                  R14	EQU	14
  000F                  R15	EQU	15
  000A                  SP	EQU	10
                        ;
                        ;----Define  Extended Operations
                        ;
                        ;	DEFINE SOME XOP'S
                        ;
                        	DXOP	SETREG,2
                        	DXOP	PUSHREG,4
                        	DXOP	POPREG,5	
                        	DXOP	CALL,6
                        	DXOP	RET,7
                        	DXOP	PUSH,8
                        	DXOP	POP,9
                        	DXOP	WHEX,10		;WRITE OUT A 16 BIT HEX VALUE
                        	DXOP	RHEX,11		;READ IN A 16 BIT HEX VALUE
                        	DXOP	WRITE,12		;WRITE CHAR IN MSB
                        	DXOP	READ,13		;READ CHAR IN MSB
                        	DXOP	MESG,14		;OUTPUT NULL TERMINATED MESSAGE
                        	DXOP	DEBUG,15
                        ;
                        ; OPERATING SYSTEM EQUATES
                        
                        ;
  C300                  SHELL:	EQU	0C300H
  D100                  BDOS:	EQU	0D100H
  F000                  MONITOR:	EQU	0F000H
                        
                        ;
                        ; SET UP STACK SPACE AND WORKSPACE
                        ;
  0230                  WORKSP:	EQU	0230H
  0500                  STACKP:	EQU	0500H
  0500                  TPA:	EQU	0500H
                        ;
                        ; SHELL ENTRY POINT
                        ;
  C300                  	AORG	SHELL
  C300   0460 C31A      	B	@INIT		;COLD START
                        ;
                        ;LOW MEMORY GLOBALS ETC
                        ;
  00A0                  CMDL_PTR:	EQU	0A0H		;ADDRESS OF SYSTEM COMMAND LINE
  00A2                  CMDL_SIZE:	EQU	0A2H		;WORD HOLDS THE LENGTH OF THE COMMAND LINE
  00A4                  BUFVECT: 	EQU	0A4H		;ADDRESS OF SYSTEM BUFFER
  00A6                  FREEMEM:	EQU	0A6H		;FREE MEMORY ADDRESS - USED IN MONITOR
  00B0                  MEMLIMIT:	EQU	0B0H		;THIS IS THE BOTTOM OF TPA
  0200                  BUFFSIZ:	EQU	512		;ADD TWO BYTES AS A SAFETY BUFFER
                        ;
  0080                  SHELLBV:	EQU	80H		;SHELL VECTORS
  0084                  BDOSV:	EQU	84H		;BDOS VECTORS (Workspace vector is not used)
                        ;
  0040                  CLSZ:	EQU	64		;MAX LENGTH OF COMMAND LINE
  0200                  BYTSEC:	EQU	512		;BYTES/SECTOR
                        
                        ;
                        ; ALL SYSTEM CALLS ARE TO BDOS ONLY AND NO CALLS TO THE MONITOR ARE PERMITTED
                        ;
  0001                  CIN	EQU	1
  0002                  COUT	EQU	2			;CONSOLE OUTPUT
  000E                  SELDSK	EQU	14
  0014                  RDSEQ	EQU	20
  000F                  FOPEN	EQU	15
  0010                  FCLOSE	EQU	16
  0011                  SEARCH1	EQU	17
  0012                  SEARCH2	EQU	18
  0013                  ERAFIL	EQU	19
  0015                  WRSEQ	EQU	21
  0016                  MAKFIL	EQU	22
  001A                  SETDMA	EQU	26
  001B                  MLOAD	EQU	27 	;
  0000                  HDERR	EQU	0		;HARD DISK ERROR BRANCH
  0000                  DOSERR	EQU	0		;DLOOK FILENAME ERROR BRACH
                        ;
                        ;
                        ;---FCB	EQUATES
                        ;
  0000                  NAM	EQU	0	
  000B                  FTY	EQU	11			;TYPE 
  0010                  FLA	EQU	16			;FILES LOAD ADDRESS
  001A                  CRN	EQU	26	 		;NEXT RECORD TO READ/WRITE 
  0018                  CBN	EQU	24	 		;CURRENT BLOCK NUMBER
  001C                  RELB	EQU	28			;RANDOM ACCESS RELATIVE BLOCK NUMBER
  001E                  RELR	EQU	30			;RELATIVE RECORD NUMBER
  000C                  FSB	EQU	12			;FILE STARTING BLOCK
  000E                  FSZ	EQU	14			;FILE SIZE IN SECTORS
                        ;
                        ;-----------------------------
                        ; MISC. ASSEMBLY CONSTANTS
                        ;-----------------------------
                        ;
  0200                  BLKSIZ	EQU	512			;DISK BLOCK SIZE
  000B                  NAMSIZ	EQU	11			;DIRECTORY NAME SIZE
  0003                  EXTSIZ	EQU	3			;EXTENSION SIZE
  0001                  DDEN	EQU	1			;DRIVE DENSITY
  0001                  DCOMR	EQU	1			;DOS READ COMMAND
  0000                  PAD	EQU	0			;SMALL-VM PAD CHAR
  C304   03             CTLC	BYTE	03H	 		;^C
  C305   18             CTLX	BYTE    	18H	 		;^X
  C306   13             CTLS	BYTE	13H			;^S
  C307   19             CTLY	BYTE	19H			;^Y
  C308   1A             CTLZ	BYTE	1AH			;^Z
  C309   20             SPACE	BYTE	20H			;SPACE CHAR
  C30A   00             	BYTE	0			;ALLOWS IT TO BE USED IN MESSAGES
  C30B   08             BS	BYTE	08H			;BACK SPACE
  C30C   0D             CR	BYTE	0DH
  C30D   0A             LF	BYTE	0AH
  C30E   07             DEL	BYTE	07H					;DELETE CHAR
  C30F   FF             EOF	BYTE	0FFH			;END OF FILE 
  C310   3A             COMT	BYTE	3AH	 		;COMMENT FLAG
  C311   2E             JUMP	BYTE	'.'	 		;JUMP TO LOADED PROG
  C312   2E             NULPARM	BYTE	'.'			;NULL PARAMETER FLAG
  C313   2E             EXT	BYTE	'.'			;EXTENSION 
  C314   5F             NOTE	BYTE	'_'	 		;OPERATOR NOTE FLAG
  C315   25             PROM	BYTE 	'%'	 		;PROMPT CHAR
  C316   24             SUBMARK	BYTE	'$'	 		;MARKS SYMBOLIC PARAM IN PROC FILE
  C317   2A             SYSFILE	BYTE	'*'	 		;IDENTIFIES A SYSTEM FILE
  C318   2B             DOSCMD	BYTE	'+'			;DOS COMMAND
  0000                  CONSOLE	EQU	0			;CONSOLE DEVICE
  0002                  EXEC	EQU	2			;TYPE OF EXECUTABLE FILE
  0005                  PROC	EQU	5		 	;TYPE OF PROCEDURE FILE
  0000                  DEFDRV	EQU	0			;DEFAULT DRIVE FOR PROC
                        ;
                        ;	INITIALISATION - SET UP LOCAL AND PROGRAMME WORKSPACE AND VECTORS AND THEN CALL 
                        ;	MONITOR
                        ;	PROGRAMMES THAT CHANGE WORKSPACE CANNOT ENTER VIA RETURN BUT MUST COME THROUGH HERE
                        ;	HAVE COME HERE THROUGH A WARM BOOT/MONITOR AND THAT INTERRUPT VECTORS ARE SET
                        ;
  C319   00             	EVEN
  C31A   0209 0000      INIT	LI	R9,0		;CLEAR SEGMENT REGISTER
  C31E   2C80           	SETREG
  C320   02E0 0230      	LWPI	WORKSP		;THIS WORKSPACE IS USED BY ALL LOADED PROGRAMMES
  C324   020A 0500      	LI	SP,STACKP		;STACK LOCATION
  C328   04CF           	CLR	R15		;CLEAR STATUS
  C32A   D820 C30C      	MOVB	@CR,@CMDLINE		;NO AUTOBOOT AT PRESENT
  C32E   CC6A           
  C330   0200 CC6A      	LI	R0,CMDLINE
  C334   C800 00A0      	MOV	R0,@CMDL_PTR		;COMMAND LINE POINTER
  C338   04E0 00A2      	CLR	@CMDL_SIZE		;ZERO THE COMMAND LINE SIZE
                        ;	LI	R0,CMDL_SIZE		;PATCH THE COMMAND LINE SIZE VECTOR
                        ;	MOV	R0,@CMDL_SIZE_PTR
  C33C   0200 CCD4      	LI	R0,MBUF		;SYSTEM BUFFER
  C340   C800 00A4      	MOV	R0,@BUFVECT
                        ;
                        ; PATCH SHELL RETURN VECTOR 
                        ;
  C344   0200 0460      INIT22	LI	R0,0460H		;BRANCH INSTRUCTION 
  C348   0201 C4F8      	LI	R1,RETURN		;INSERT BRANCH VECTORS	
  C34C   C800 0080      	MOV	R0,@SHELLBV
  C350   C801 0082      	MOV	R1,@SHELLBV+2
                        ;
                        ; PATCH BDOS VECTORS - NOTE THE WORKSPACE IS NOT USED
                        ;
  C354   0200 0460      	LI	R0,0460H		;BRANCH OPCODE
  C358   0201 D100      	LI	R1,BDOS		;ADDRESS OF BDOS IN MEMORY
                        
  C35C   C800 0084      	MOV	R0,@BDOSV		;BDOS BRANCH VECTOR INSTRUCTION
  C360   C801 0086      	MOV	R1,@BDOSV+2		;BDOS VECTOR
                        ;
                        ; 	PATCH FREEM MEMORY VECTORS
                        ; 	TOP OF FREE MEMORY - RESET BY SHELL WHEN LOADING PROGS FROM DOS
                        ;
  C364   0200 0500      	LI	R0,TPA		;START OF FREEMEM WHEN NO PROGRAMMES ARE LOADED
  C368   C800 00A6      	MOV	R0,@FREEMEM
  C36C   0200 C300      	LI	R0,SHELL		;SET THE MEMORY LIMIT
  C370   C800 00B0      	MOV	R0,@MEMLIMIT
                        	;
                        ;
                        ; NOW SIGN ON
                        ;
                        ;
  C374   2FA0 CEDA      	MESG	@SINON		;PRINT SIGN ON MESSAGE
                        ;
                        ;	FALL INTO DOCMD
                        ;
                        ;---------------------------------------
                        ;	DO NEXT SHELL COMMAND
                        ;---------------------------------------
                        ;
  C378   C020 CC5E      DOCMD	MOV	@SKIPSW,R0	 	;SKIP THIS CMD?
  C37C   04E0 CC5E      	CLR	@SKIPSW
  C380   C000           	MOV	R0,R0
  C382   1616           	JNE	DOCMD2A		;YES
  C384   04C1           	CLR	R1
  C386   D060 CC6A      	MOVB	@CMDLINE,R1
  C38A   9801 C30C      	CB	R1,@CR		;IS 1ST BYTE OF CMD A CR ?
  C38E   1310           	JEQ	DOCMD2A	 	;YES-IGNORE CMD
                        
  C390   0281 0000      CHKSYS	CI	R1,0		;(MUST USE TWO WORDS) SYS FILE?<<ALTERED AFTER BOOT>>
  C394   1602           	JNE	DOCMD1	 	;NO
  C396   0460 CAEE      	B	@CMDERR	 	;YES
                        ;
                        ;	RETURN TO MONITOR ?
                        ;
  C39A   9801 C305      DOCMD1	CB	R1,@CTLX	 	;^X?
  C39E   1602           	JNE	DOCMDAA		 ;NO
  C3A0   0420 F000      	BLWP	@MONITOR
  C3A4   9801 C307      DOCMDAA	CB	R1,@CTLY		;^Y
  C3A8   1600           	JNE	DOCMD2
                        ;
                        ;
                        ;	LEADING CHAR <=SPACE ?
                        ;
  C3AA   9801 C309      DOCMD2	CB	R1,@SPACE	 
  C3AE   1B02           	JH	DOCMD4		;NO
                        ;
  C3B0   0460 C520      DOCMD2A	B	@NEXTCMD	 	;YES
                        ;
                        ;  TO JUMP TO THE LAST LOADED PROGRAMME AT TPA, JUST TYPE '.'.  TO LOAD
                        ;  A PROGRAMME FROM DISC, THEN TYPE '.PROGRAMME NAME'
                        ;
  C3B4   9801 C311      DOCMD4	CB	R1,@JUMP		;'.'
  C3B8   1607           	JNE	DOCMD3	
  C3BA   0203 CC6B      	LI	R3,CMDLINE+1
  C3BE   9813 C309      	CB	*R3,@SPACE		;2ND BYTE A GRAPHIC?
  C3C2   1B0F           	JH	DLOOK1	 	;YES,LOAD
  C3C4   0460 C4D4      	B	@GOPROG	 	;NO,JUMP
                        ;
                        ;******************************************
                        ;
                        ;	DOS COMMAND  '+FILENAME'
                        ;
                        ;********************************************
                        ;
  C3C8   9801 C318      DOCMD3	CB	R1,@DOSCMD
  C3CC   1602           	JNE	LOOK
                        ;
                        ; PROCESS DOS COMMAND HERE
                        ;
                        DOCMD9	;MAY USE LATER
  C3CE   0460 C4F8      	B	@RETURN
                        ;	
                        ;
                        ;	LOOKUP NAMED FILE
                        ;
  C3D2   0203 0000      LOOK	LI	R3,DEFDRV
  C3D6   0202 000E      	LI	R2,SELDSK
  C3DA   2DA0 D100      	CALL	@BDOS
  C3DE   0203 CC6A      	LI	R3,CMDLINE	 	;R3->FILENAME
  C3E2   0204 CFD4      DLOOK1	LI	R4,FCB	 	;POINT TO FCB
  C3E6   0202 000B      	LI	R2,NAMSIZ 		;NAME LENGTH
  C3EA   9813 C309      DLOOK2	CB	*R3,@SPACE
  C3EE   1212           	JLE	DLOOK3	 	;NON GRAPHIC
                        ;
                        ;DETECT FILE EXTENSION - IF NONE ASSUME .EXE/COM
                        ;
  C3F0   9813 C313      	CB	*R3,@EXT		;'.'?
  C3F4   160B           	JNE	DLOOK5
                        ;
                        ;	PAD TO FILL TO EXT - ASSUME USER WILL ALWAYS TYPE IN EXTENSION IF NEEDED
                        ;	THIS ALLOWS RUN.EXE TO BE PADDED TO 'RUN     EXE'
                        ;
  C3F6   0583           	INC	R3		;JUMP OVER '.'
  C3F8   0222 FFFD      	AI	R2,-EXTSIZ		;EXTENSION ARE 3 BYTES LONG
  C3FC   1A37           	JL	LOOKERR		;ASSUME EXT IS PART OF FILENAME
  C3FE   1304           	JEQ	DLOOK7
  C400   DD20 C309      DLOOK6	MOVB	@SPACE,*R4+ 	;PAD WITH SPACES
  C404   0602           	DEC	R2
  C406   16FC           	JNE	DLOOK6
  C408   0202 0003      DLOOK7	LI	R2,EXTSIZ		;RESET TO COPY EXTENSION CHARS
  C40C   DD33           DLOOK5	MOVB	*R3+,*R4+		;No
  C40E   0602           	DEC	R2
  C410   16EC           	JNE	DLOOK2	 	;KEEP GOING
  C412   1004           	JMP	DLOOK4
  C414   DD20 C309      DLOOK3	MOVB	@SPACE,*R4+ 	;PAD WITH SPACES
  C418   0602           	DEC	R2
  C41A   16FC           	JNE	DLOOK3
  C41C   2DA0 C5E8      DLOOK4	CALL	@ICMD		;LOOK FOR INTERNAL COMMAND
  C420   0203 CFD4      	LI	R3,FCB	 	;SET FDC PTR
  C424   0202 0011      	LI	R2,SEARCH1		;SEARCH RETURNS WITH R3->DIRECTORY ENTRY
  C428   2DA0 D100      	CALL	@BDOS	 	;TRY TO FIND A FILE
  C42C   C041           	MOV	R1,R1	 	;SUCCESS ?
  C42E   111E           	JLT	LOOKERR		;NO FILES ON DISC
  C430   0202 000F      	LI	R2,FOPEN		;SEARCH RETURNS WITH R3->DIRECTORY ENTRY
  C434   0203 CFD4      	LI	R3,FCB
  C438   2DA0 D100      	CALL	@BDOS		;OPEN FILE
  C43C   C041           	MOV	R1,R1		;FOUND?
  C43E   1116           	JLT	LOOKERR	 	;NO
  C440   0204 CFD4      	LI	R4,FCB
  C444   C103           	MOV	R3,R4		;COPY FCB
  C446   C824 000E      	MOV	@FSZ(R4),@MFSZ 		;FILE SIZE
  C44A   CCC2           
  C44C   D024 000B      	MOVB	@FTY(R4),R0
  C450   0980           	SRL	R0,8
  C452   C800 CCC0      	MOV	R0,@MFTY		; 
  C456   130C           	JEQ	LOAD		;ZERO BYPASSES CHECKS
  C458   0240 0007      	ANDI	R0,7	 	;MASK TYPE BITS
  C45C   0280 0002      	CI	R0,2		;EXECUTABLE ?
  C460   1307           	JEQ	LOAD	 	;YES
  C462   0280 0005      	CI	R0,5	 	;PROCEDURE TYPE?
  C466   1602           	JNE	LOOKERR		;NO
  C468   0460 CB38      	B	@DOPROC
  C46C   0460 CAEE      LOOKERR	B	@CMDERR	 	;NO-TOO BAD
                        ;
                        ;=================================================================================================
                        ;
                        ;	LOAD EXECUTABLE	FILE.
                        ;
                        ;==================================================================================================
                        ;
  C470   04C1           LOAD	CLR	R1	 	;DISABLE PROG REENTRY
  C472   D801 CC68      	MOVB	R1,@CMDLINE-2
                        ;
                        ; NOW THE FILE MODULES IF THEY EXIST;
                        ; FLA (FILE LOAD ADDRESS)	0  NO LOAD ADDRESS SPECIFIED, LOAD WHEREVER YOU WISH
                        ;		-1 CALL MLOAD TO LOAD MULTIPLE MODULES OR TO USE SEGMENTED MEMORY
                        ;		NZ NON ZERO, ASSUME LOAD ADDRESS AND LOAD TO THIS ADDRESS
                        ;
                        
  C476   0204 CFD4      LOAD3	LI	R4,FCB
                        ;
                        ; BYPASS MLOAD FOR TIME BEING
                        ;
                        ;	JMP	LOAD4
                        
  C47A   C0E4 0010      	MOV	@FLA(R4),R3		;GET LOAD ADDRESS
  C47E   1302           	JEQ	LOAD4
  C480   0583           	INC	R3		;IS IT -1?
  C482   1303           	JEQ	LOAD5
                        ; 	JMP	LOAD2		;USE THE LOAD ADDRESS IN FLA
  C484   0203 0500      LOAD4	LI	R3,TPA		;IF ZERO, USE TPA AS LOAD ADDRESS
  C488   1007           	JMP	LOAD2		;LOAD ADDRESS SPECIFIED
                        	;
                        	; IF FLA = -1  CALL MLOAD
                        	;
  C48A   0202 001B      LOAD5	LI	R2,MLOAD		;FIRST MODULE ALWAYS LOADS AT 0500H
  C48E   0203 CFD4      	LI	R3,FCB
  C492   2DA0 D100      	CALL	@BDOS		;BDOS WILL RETURN FREEMEM IN R3
  C496   1016           	JMP	LOAD1
                        ;
  C498   C803 CC66      LOAD2	MOV	R3,@LADDR
  C49C   04E4 001A      	CLR	@CRN(R4)		;RECORD 0
  C4A0   2E03           LOAD0	PUSH	R3		;SAVE DMA ADDR
  C4A2   0202 001A      	LI	R2,SETDMA
  C4A6   2DA0 D100      	CALL	@BDOS
  C4AA   0202 0014      	LI	R2,RDSEQ 		;LOAD THE FILE
  C4AE   0203 CFD4      	LI	R3,FCB
  C4B2   2DA0 D100      	CALL	@BDOS
  C4B6   2E43           	POP	R3	 	;POP DMA ADDR
  C4B8   0281 FFFF      	CI	R1,-1		;LOOK FOR EOF
  C4BC   1303           	JEQ	LOAD1	 		;
  C4BE   0223 0200      	AI	R3,BLKSIZ	 	;UP DMA
  C4C2   10EE           	JMP	LOAD0	 		;
  C4C4   0223 0200      LOAD1	AI	R3,BLKSIZ	 	;MOVE TO THE NEXT BLOCK TO PROVIDE BUFFER
  C4C8   C803 00A6      	MOV	R3,@FREEMEM		;THIS IS THE NEW FREE MEMORY POINTER
  C4CC   9820 CC6A      	CB	@CMDLINE,@JUMP		;JUST LOAD IT?
  C4D0   C311           
  C4D2   1326           	JEQ	NEXTCMD	 	;YES
                        ;
                        ;**************************************************
                        ;
                        ;	JUMP TO LOADED PROGRAM
                        ;
                        ;***************************************************
                        ;
  C4D4   C820 CC66      GOPROG	MOV	@LADDR,@GO+2		;JUMP ADDR
  C4D8   C4F6           
  C4DA   0204 CC6A      	LI	R4,CMDLINE 		;?
  C4DE   0584           GOLOOP	INC	R4	
  C4E0   9814 C309      	CB	*R4,@SPACE	 	;1ST CHAR <=SPACE?
  C4E4   1BFC           	JH	GOLOOP	 	;NO
  C4E6   04C1           	CLR	R1	 	;TELL SMALL-VM IT'S A SHELL COMMAND
  C4E8   D801 CC69      	MOVB	R1,@CMDLINE-1	;DONE
  C4EC   0200 0080      	LI	R0,SHELLBV		;RETURN ADDRESS IF NEEDED
  C4F0   2E00           	PUSH	R0
                        ;
                        ;	THIS GIVES ACCESS OF LOADED PROGRAMMES TO STACK ETC
                        ;
  C4F2   02AD           	STWP	WP		;GIVE THE CALLING PROGRAMME ACCESS TO THE WORKSPACE ADDRESS ( NEEDED IN SMALLC )
  C4F4   0460 CB04      GO	B	@SHELLERR 		;<<THIS ADDR IS ALTERED BY MOVE @GO+2>>
                        ;
                        ; R4 = RETURN CODE		
                        ;			
                        ;
                        ;	R1 IS THE RETURN CODE
                        ;	NOTE NEED TO RESTORE WP POINTERS ETC
                        ;
  C4F8   D801 CC68      RETURN	MOVB	R1,@CMDLINE-2
  C4FC   02E0 0230      	LWPI	WORKSP		;REINITIALSE WORKSPACE AND STACK POINTERS
  C500   020A 0500      	LI	SP,STACKP
  C504   04CF           	CLR	R15		;CLEAR STATUS
  C506   D060 CC68      	MOVB	@CMDLINE-2,R1
  C50A   0881           	SRA	R1,8
  C50C   0281 FFFF      	CI	R1,-1		;RETURN VIA SMALL-VM?
  C510   1607           	JNE	NEXTCMD 		;NO
  C512   04C1           	CLR	R1
  C514   D801 CC68      	MOVB	R1,@CMDLINE-2	;ENABLE PROGRAMME RE-ENTRY
  C518   C041           	MOV	R1,R1	 	;IS RETURN CODE ZERO?
  C51A   1302           	JEQ	NEXTCMD		;YES
  C51C   0460 CB26      	B	@UNPROC	 	;NO,ABORT PROC CMD IF IN PROGRESS
                        ;
                        ;-----WHERE IS NEXT COMMAND TO BE FOUND
                        ;
  C520   D060 CC5C      NEXTCMD	MOVB	@PROCSW,R1
  C524   1302           	JEQ	PROMPT
  C526   0460 C972      	B	@PFETCH 
                        				 
                        ;
                        ;-----CONSOLE	INPUT
                        ;
  C52A   D0E0 C315      PROMPT 	MOVB	@PROM,R3		;PROMPT CHARACTER INTO MSB
  C52E   2DA0 CC1C      	CALL	@OUTCHAR
  C532   0204 CC6A      	LI	R4,CMDLINE 		;R4=DEST PTR
  C536   0205 0040      	LI	R5,CLSZ		;R5=CHAR COUNTER
  C53A   C060 0000      CINLOOP	MOV	@CONSOLE,R1	
  C53E   2DA0 CC10      	CALL	@INCHAR	 	; RETURN INTO MSB OF R1
  C542   9801 C30B      	CB	R1,@BS	 	;BS?
  C546   132A           	JEQ	RUBOUT	
  C548   9801 C30E      	CB	R1,@DEL	 	;DEL?
  C54C   1327           	JEQ	RUBOUT	
  C54E   9801 C304      	CB	R1,@CTLC 		;^C?
  C552   1604           	JNE	STOWIT	 	;NO
  C554   D060 C30C      	MOVB	@CR,R1	 	;YES (CR=0DH)
  C558   D801 CC6A      	MOVB	R1,@CMDLINE	 	;IGNORE CMD
                        ;
                        ;---Convert to upper case
                        ;
  C55C   C001           STOWIT	MOV 	R1,R0
  C55E   0980           	SRL	R0,8
  C560   0280 0061      	CI 	R0,61H		;'a'
  C564   1A08           	JL	STOWIT2	
  C566   0280 007A      	CI	R0,7AH		;'z'
  C56A   1B05           	JH	STOWIT2
  C56C   0220 FFE0      	AI	R0,-20H		;CONVERT TO LOWER CASE
  C570   06C0           	SWPB	R0
  C572   DD00           	MOVB	R0,*R4+
  C574   1001           	JMP	STOWIT2+2
  C576   DD01           STOWIT2	MOVB	R1,*R4+		;STORE THE CHARACTER
  C578   0605           	DEC	R5	
  C57A   1223           	JLE	CIOERR		;NO MORE SPACE
  C57C   9801 C309      	CB	R1,@SPACE		;CTL CHAR?
  C580   1404           	JHE	ECHO	 	;NO,CONTINUE
  C582   04C0           	CLR	R0
  C584   D060 C30C      	MOVB	@CR,R1		;FORCE CR
  C588   D500           	MOVB	R0,*R4 		;NULL TERMINATE
  C58A   C0C1           ECHO	MOV	R1,R3		;ECHO CHAR
  C58C   2DA0 CC1C      	CALL	@OUTCHAR		;RETURNS CHAR IN R1 LSB
  C590   04E0 CC5E      	CLR	@SKIPSW	 	;DOSN'T ALTER FLAGS
  C594   9801 C30D      	CB	R1,@LF	 	;OUTCHAR GENERATES AUTO LF AFTER CR
  C598   130D           	JEQ	GODOCMD	 
  C59A   10CF           	JMP	CINLOOP	
  C59C   0285 0040      RUBOUT	CI	R5,CLSZ	
  C5A0   14CC           	JHE	CINLOOP	 	;CMDLINE IS EMPTY
  C5A2   0585           	INC	R5	
  C5A4   0604           	DEC	R4	
  C5A6   2E04           	PUSH	R4	 	;PUSH R4
  C5A8   0204 CF33      	LI	R4,RUBMSG	
  C5AC   2DA0 CC44      	CALL	@OUTSTR	 
  C5B0   2E44           	POP	R4	
  C5B2   10C3           	JMP	CINLOOP	
  C5B4   0200 CC6A      GODOCMD	LI	R0,CMDLINE
  C5B8   6100           	S	R0,R4		;CALCULATE THE LENGTH OF THE COMMAND LINE USING THE POINTER IN R4
                        ;	SWPB	R4		;CAN'T BE GREATER THAN 255
  C5BA   C804 00A2      	MOV	R4,@CMDL_SIZE	;STORE CMDLINE SIZE FOR SMALL C
  C5BE   0460 C378      	B	@DOCMD	
  C5C2   0460 CAF4      CIOERR	B	@LINERR	
                        
                        ;
                        ;*****************************************************
                        ;	LOOK FOR INTERNAL COMMANDS, I.E. DIR, SAVE, ETC
                        ;	FBC -> FILENAME
                        ;
                        ;*****************************************************
                        ;
  0004                  CMDCNT	EQU 	4		;NUMBER OF POSSIBLE INTERNAL COMMANDS
  C5C6   4449 52        ICLIST	TEXT	"DIR"
  C5C9   00             	BYTE	0		;END
  C5CA   C63A           	WORD	DSKDIR		;ADDRESS
  C5CC   5341 5645      	TEXT	"SAVE"
  C5D0   00             	BYTE	0		; END
  C5D1   C6D8           	WORD	DSKSAVE		;ADDRESS
  C5D3   4552 41        	TEXT	"ERA"		;ERASE
  C5D6   00             	BYTE	0		; END
  C5D7   C7FC           	WORD	ERAFILE		;ADDRESS
  C5D9   5459 5045      	TEXT	"TYPE"		;TYPE A FILE TO THE CONSOLE
  C5DD   00             	BYTE	0		; END
  C5DE   C87C           	WORD	TYPEFILE		;ADDRESS
  C5E0                  	EVEN
                        ;
                        ;	MISC STORAGE
                        ;
  C5E0   0002           BUFPNT	WORD	2	 	;BUFFER POINTER
  C5E2   0002           RECCNT	WORD	2	 	;NO. OF PAGES TO SAVE
  C5E4   0002           SADDR	WORD	2		;START ADDRESS
  C5E6   2D             SWITCH	BYTE	'-'		;COMMAND LINE SWITCH
  C5E7   00             	EVEN
                        ;	
  C5E8   0201 C5C6      ICMD	LI	R1,ICLIST
  C5EC   0203 CFD4      	LI	R3,FCB		;NAME OF COMMAND
  C5F0   0205 0004      	LI	R5,CMDCNT	;NUMBER OF INTERNAL COMMANDS
  C5F4   9C73           ICMD0	CB	*R3+,*R1+
  C5F6   13FE           	JEQ	ICMD0
  C5F8   0601           	DEC	R1		;BACK UP THE POINTER
  C5FA   0603           	DEC	R3
  C5FC   9813 C309      	CB	*R3,@SPACE	;IF SPACE WE HAVE REACHED THE END OF THE FILENAME
  C600   1B09           	JH	ICMD1	 	;GRAPHIC CHARACTER, MEANS NO MATCH
  C602   D011           	MOVB	*R1,R0		;TEST FOR END OF ENTRY
  C604   1607           	JNE	ICMD1		;NO MATCH
                        ;
                        ;	MATCH HERE BRANCH TO ADDRESS
                        ;	
  C606   0581           	INC	R1		;MOVE TO ADDRESS FIELD
  C608   D0B1           	MOVB	*R1+,R2		;MSB PART OF ADDRESS
  C60A   06C2           	SWPB	R2
  C60C   D0B1           	MOVB	*R1+,R2
  C60E   06C2           	SWPB	R2		;ADDRESS IS NOW IN R2
  C610   2E40           	POP	R0		;WE WON'T BE RETURNING SO POP RETURN ADDRESS
  C612   0452           	B	*R2		;CALL THE COMMAND
                        ;
  C614   0605           ICMD1	DEC	R5		;MORE COMMANDS TO SEARCH ?
  C616   1306           	JEQ	ICMDE
                        ;
                        ; NEXT INTERNAL COMMAND
                        ;
  C618   D031           ICMD2	MOVB	*R1+,R0		; LOOK FOR TEMINATOR
  C61A   16FE           	JNE	ICMD2
  C61C   05C1           	INCT	R1		;POINT TO NEXT COMMAND
  C61E   0203 CFD4      	LI	R3,FCB		;R1 POINTS TO NEXT COMMAND
  C622   10E8           	JMP	ICMD0
  C624   2DC0           ICMDE	RET			;RETURN 
                        ;
                        ;*********************************************************
                        ;
                        ; INTERNAL COMMAND DIR
                        ;
                        ;**********************************************************
                        ;
                        ;	MISC DEFINITIONS
                        ;
  C626   203A 20        BAR	TEXT	' : '
  C629   00             	BYTE	0
  C62A   0D0A 00        CRLF	BYTE	0DH,0AH,0
  C62D   4E4F 2046      MNOFILE	TEXT	'NO FILES'
  C631   494C 4553      
  C635   0D0A 00        	BYTE	0DH,0AH,0
  C638                  	EVEN
  C638   0000           CCOUNT	WORD	0			;COLUMN COUNTER
                        ;
  C63A                  	EVEN
                        ;
                        ; PERFORM A DIRECTORY LIST OF ALL FILES ON DRIVE
                        ;
  C63A   0200 0006      DSKDIR:	LI	R0,6
  C63E   C800 C638      	MOV	R0,@CCOUNT
  C642   0201 3F00      	LI	R1,'?'*256		;WILD CHARACTER
  C646   0200 000B      	LI	R0,NAMSIZ 		;FCB COUNTER
  C64A   0208 CFD4      	LI	R8,FCB	  		;
  C64E   C088           	MOV	R8,R2	 		;SAVE FCB
  C650   DC81           DSKDIR0	MOVB	R1,*R2+	 		;STORE IN FCB
  C652   0600           	DEC	R0	 		;ANY MORE ALLOWED ?
  C654   16FD           	JNE	DSKDIR0	 		;YES
                        ;
                        ;	NOW SEARCH FOR FILES
                        ;
  C656   0202 0011      	LI	R2,SEARCH1		;SEARCH RETURNS WITH R3->DIRECTORY ENTRY
  C65A   0203 CFD4      	LI	R3,FCB
  C65E   2DA0 D100      	CALL	@BDOS	 		;TRY TO FIND A FILE
  C662   C041           	MOV	R1,R1	 		;SUCCESS ?
  C664   1132           	JLT	NOFILE			;NO FILES ON DISC
  C666   2DA0 C680      	CALL	@PNAME			;PRINT THE NAMES	
                        ;
                        ;	CONTINUE
                        ;
  C66A   0202 0012      DSKDIR1	LI	R2,SEARCH2
  C66E   0203 CFD4      	LI	R3,FCB
  C672   2DA0 D100      	CALL	@BDOS
  C676   C041           	MOV	R1,R1
  C678   1123           	JLT	DIREXIT
  C67A   2DA0 C680      	CALL	@PNAME
  C67E   10F5           	JMP	DSKDIR1
                        ;
                        ;********************************
                        ;
                        ;	PRINT THE DIRECTORY ENTRY
                        ;
                        ;	R3 -> CURRENT DIRECTORY ENTRY	
                        ;
                        ;*********************************
                        ;
  C680   0620 C638      PNAME	DEC	@CCOUNT
  C684   1606           	JNE	PNAME1
  C686   2FA0 C62A      	MESG	@CRLF
  C68A   0201 0006      	LI	R1,6
  C68E   C801 C638      	MOV	R1,@CCOUNT
                        ;
  C692   C043           PNAME1	MOV	R3,R1			;DIRECTORY POINTER
  C694   0200 000B      	LI	R0,NAMSIZ
  C698   2E00           PNAME2	PUSH	R0
  C69A   D0F1           	MOVB	*R1+,R3			;PRINT NAME
  C69C   06C3           	SWPB	R3			;DO PRINTS LSB
  C69E   2E01           	PUSH	R1
  C6A0   0202 0002      	LI	R2,COUT
  C6A4   2DA0 D100      	CALL	@BDOS	
  C6A8   2E41           	POP	R1
  C6AA   2E40           	POP	R0
  C6AC   0600           	DEC	R0
  C6AE   16F4           	JNE	PNAME2
  C6B0   C020 C638      	MOV	@CCOUNT,R0
  C6B4   0280 0001      	CI	R0,1			;IF LAST ENTRY ON LINE DONT BAR
  C6B8   1302           	JEQ	PNAME3
  C6BA   2FA0 C626      	MESG	@BAR
  C6BE   2DC0           PNAME3	RET
                        ;
                        ;
  C6C0   2FA0 C62A      DIREXIT	MESG	@CRLF
  C6C4   04C1           	CLR 	R1			;SHOW RETURN NOT FROM VM
  C6C6   0460 C4F8      	B	@RETURN			;RETURN TO SHELL
                        ;
  C6CA   2FA0 C62D      NOFILE	MESG	@MNOFILE
  C6CE   04C1           	CLR	R1			;SHOW RETURN NOT FROM VM
  C6D0   0460 CAEE      	B	@CMDERR	
                        	
                        ;
                        ;*******************************************************
                        ;
                        ; SAVE A PROGRAMME IN MEMORY TO A FILE 
                        ; SYNTAX.  OPTIONAL ARGUMENT ARE IN []
                        ;	SAVE <NUMBER OF 512 SECTORS> <FILENAME>  <-MEMORY ADDRESS>
                        ;
                        ;
                        ;
                        ;******************************************************
                        ;
                        ;BDOSRV EQUATES	
                        ;
  00A0                  CMDPTR	EQU	0A0H		;SHELL COMMAND LINE POINTER
  C6D4   0460 C896      PARSERR	B	@PARSMSG
                        
  C6D8   04E0 C5E0      DSKSAVE	CLR	@BUFPNT
  C6DC   04E0 C5E2      	CLR	@RECCNT
  C6E0   0208 0500      	LI	R8,TPA		;DEFAULT START ADDRESS
  C6E4   C808 C5E4      	MOV	R8,@SADDR
  C6E8   0208 CC6A      	LI	R8,CMDLINE
  C6EC   9838 C309      START00	CB	*R8+,@SPACE	 	;JUMP OVER 'SAVE' LOOK FOR NON VALID CHARACTERS
  C6F0   1BFD           	JH	START00
  C6F2   0608           	DEC	R8	 	;BACK UP TO 1ST CHAR
  C6F4   9818 C30C      START02	CB	*R8,@CR		;EOF COMMAND?
  C6F8   13ED           	JEQ	PARSERR
  C6FA   9838 C309      	CB	*R8+,@SPACE		;NOW JUMP OVER SPACES
  C6FE   12FA           	JLE	START02
  C700   0608           	DEC	R8
  C702   C808 C5E0      	MOV	R8,@BUFPNT		;LOOK FOR NUMBER OF SECTORS
  C706   2DA0 C8B4      	CALL	@ATOD	 	;CONVERT ASCII TO DEC
  C70A   C041           	MOV	R1,R1	 	;ZERO SHOWS ERROR
  C70C   13E3           	JEQ	PARSERR
  C70E   C801 C5E2              MOV	R1,@RECCNT		;SAVE AS PAGE COUNT                           
  C712   C220 C5E0      	MOV	@BUFPNT,R8
                        ;
                        ;	LOOK FOR FILE NAME
                        ;
  C716   9818 C30C      STRT01	CB	*R8,@CR		;EOL COMMAND?
  C71A   13DC           	JEQ	PARSERR
  C71C   9838 C309      	CB	*R8+,@SPACE 	;LOOK FOR NAME
  C720   12FA           	JLE	STRT01
  C722   0608           	DEC	R8	 	;BACK UP
  C724   C0C8           	MOV	R8,R3		;R3->NAME
  C726   0200 000B      	LI	R0,NAMSIZ 		;FCB COUNTER
  C72A   0208 CFD4      	LI	R8,FCB	  		;
  C72E   D620 C309      	MOVB	@SPACE,*R8		;FILL WITH SPACE
  C732   C088           	MOV	R8,R2	 		;SAVE FCB
  C734   9813 C309      NAM0	CB	*R3,@SPACE	 	;END OF NAME ?
  C738   1207           	JLE	NAM1	 	;YES
  C73A   13CC           	JEQ	PARSERR
  C73C   0583           	INC	R3		;UP POINTER
  C73E   0600           	DEC	R0		;DONT STORE TOO MANY
  C740   12F9           	JLE	NAM0
  C742   0603           	DEC	R3
  C744   DCB3           	MOVB	*R3+,*R2+		;STORE IN FCB
  C746   10F6           	JMP	NAM0		;KEEP GOING
  C748   C000           NAM1	MOV	R0,R0
  C74A   1204           	JLE	NAM2		;FCB ALREADY FULL
  C74C   DCA0 C309      NAM4	MOVB	@SPACE,*R2+	 	;PAD WITH SPACES
  C750   0600           	DEC	R0
  C752   16FC           	JNE	NAM4
                        ;
                        ;	LOOK FOR START ADDRESS	
                        ;	IF EOL ENCOUNTERED USE DEFAULT TPA
                        ;
  C754   9833 C309      NAM2	CB	*R3+,@SPACE		; END
  C758   13FD           	JEQ	NAM2		;KEEP LOOKING FOR NUMBER
  C75A   0603           	DEC	R3
  C75C   9813 C30C      	CB	*R3,@CR
  C760   130B           	JEQ	NAMSRCH		;USE DEFAULT TPA
  C762   9833 C5E6      	CB	*R3+,@SWITCH	;SEE IF ANY SWITCHS ARE THERE
  C766   16B6           	JNE	PARSERR
  C768   C803 C5E0      	MOV	R3,@BUFPNT		;FOR ATOD
  C76C   2DA0 C8E0      	CALL	@CATOH		;SEE IF ITS LEGAL
  C770   C041           	MOV	R1,R1		;ZERO IS AN ERROR
  C772   13B0           	JEQ	PARSERR
  C774   C801 C5E4      	MOV	R1,@SADDR		;SAVE AS START ADDRESS
                        ;
                        ;	USE BDOS TO SEARCH FOR FILE
                        ;
  C778   0202 0011      NAMSRCH	LI	R2,SEARCH1		;SEARCH RETURNS WITH R3->DIRECTORY ENTRY
  C77C   0203 CFD4      	LI	R3,FCB
  C780   2DA0 D100      	CALL	@BDOS	 	;TRY TO FIND A FILE
  C784   C041           	MOV	R1,R1	 	;SUCCESS ?
  C786   1106           	JLT	NAM5		;NO FILES ON DISC
  C788   0202 0013      NAM3	LI	R2,ERAFIL 		;PURGE IF ALREADY EXITS
  C78C   0203 CFD4      	LI	R3,FCB
  C790   2DA0 D100      	CALL	@BDOS
  C794   0202 0016      NAM5	LI	R2,MAKFIL
  C798   0203 CFD4      	LI	R3,FCB
  C79C   2DA0 D100      	CALL	@BDOS	 	;TRY TO MAKE THE FILE
  C7A0   C041           	MOV	R1,R1	 	;SUCCESS ?
  C7A2   1171           	JLT	MKERR	 	;MAKE ERROR
  C7A4   04C0           	CLR	R0
  C7A6   0204 CFD4      	LI	R4,FCB
  C7AA   D900 000B      	MOVB	R0,@FTY(R4)		;ZERO SAYS DONT CARE
  C7AE   C0E0 C5E4      	MOV	@SADDR,R3		;START ADDRESS
  C7B2   C903 0010      	MOV	R3,@FLA(R4)		;EXECUTE ADDRESS
  C7B6   04E4 001A      	CLR	@CRN(R4)		; RECORD 0 IS FOR MODULE TABLE INDEX
  C7BA   2E03           WRDATA	PUSH	R3
  C7BC   0202 001A      	LI	R2,SETDMA
  C7C0   2DA0 D100      	CALL	@BDOS
  C7C4   0202 0015      	LI	R2,WRSEQ
  C7C8   0203 CFD4      	LI	R3,FCB
  C7CC   2DA0 D100      	CALL	@BDOS
  C7D0   2E43           	POP	R3	 	;POP ADDR
  C7D2   C041           	MOV	R1,R1	 	;WRITE ERROR ?
  C7D4   1155           	JLT	WRITERR	 	;YES
                        ;
                        ;	SET FILE LIMIT
                        ;
  C7D6   0283 C200      	CI	R3,0C200H
  C7DA   1461           	JHE	LARGERR
  C7DC   0223 0200      	AI	R3,BYTSEC 		;NEXT PAGE
  C7E0   0620 C5E2      	DEC	@RECCNT	 	;FINISHED ?
  C7E4   16EA           	JNE	WRDATA		;YES
  C7E6   0202 0010      WRDATAC	LI	R2,FCLOSE	 	;NOW CLOSE THE FILE
  C7EA   0203 CFD4      	LI	R3,FCB
  C7EE   2DA0 D100      	CALL	@BDOS
  C7F2   04C1           EXIT	CLR	R1		;RETURN CODE FOR SHELL
  C7F4   0460 C4F8      	B	@RETURN		;NEED TO CALL SHELL INIT BECAUSE WE HAVE ALTERED WP
                        
                        
                        ;
                        ;*******************************************************
                        ;
                        ; ERASE A FILE FROM DISC 
                        ;
                        ;
                        ;******************************************************
  C7F8   0460 C896      ERAPERR	B	@PARSMSG
                        
  C7FC   04E0 C5E2      ERAFILE	CLR	@RECCNT
  C800   04E0 C5E0      	CLR	@BUFPNT
  C804   0208 0500      	LI	R8,TPA			;DEFAULT START ADDRESS
  C808   C808 C5E4      	MOV	R8,@SADDR
  C80C   0208 CC6A      	LI	R8,CMDLINE
  C810   9838 C309      ERA0	CB	*R8+,@SPACE	 	;JUMP OVER 'ERA' LOOK FOR NON VALID CHARACTERS
  C814   1BFD           	JH	ERA0
  C816   0608           	DEC	R8	 		;BACK UP TO 1ST CHAR
                        ;
                        ;LOOK FOR FILE NAME
                        ;
  C818   9818 C30C      ERA01	CB	*R8,@CR			;EOL COMMAND?
  C81C   13ED           	JEQ	ERAPERR
  C81E   9838 C309      	CB	*R8+,@SPACE 		;LOOK FOR NAME
  C822   12FA           	JLE	ERA01
  C824   0608           	DEC	R8	 		;BACK UP
  C826   C0C8           	MOV	R8,R3			;R3->NAME  
  C828   0200 000B      	LI	R0,NAMSIZ 		;FCB COUNTER
  C82C   0208 CFD4      	LI	R8,FCB	  	;
  C830   D620 C309      	MOVB	@SPACE,*R8		;FILL WITH SPACE
  C834   C088           	MOV	R8,R2	 	;SAVE FCB
  C836   9813 C309      ERA1	CB	*R3,@SPACE	 	;END OF NAME ?
  C83A   1207           	JLE	ERA2	 	;YES
  C83C   13DD           	JEQ	ERAPERR
  C83E   0583           	INC	R3		;UP POINTER
  C840   0600           	DEC	R0		;DONT STORE TOO MANY
  C842   12F9           	JLE	ERA1
  C844   0603           	DEC	R3
  C846   DCB3           	MOVB	*R3+,*R2+		;STORE IN FCB
  C848   10F6           	JMP	ERA1		;KEEP GOING
  C84A   C000           ERA2	MOV	R0,R0
  C84C   1204           	JLE	ERA4		;FCB ALREADY FULL
  C84E   DCA0 C309      ERA3	MOVB	@SPACE,*R2+	 	;PAD WITH SPACES
  C852   0600           	DEC	R0
  C854   16FC           	JNE	ERA3
                        ;
                        ;	USE BDOS TO SEARCH FOR FILE
                        ;
  C856   0202 0011      ERA4	LI	R2,SEARCH1		;SEARCH RETURNS WITH R3->DIRECTORY ENTRY
  C85A   0203 CFD4      	LI	R3,FCB
  C85E   2DA0 D100      	CALL	@BDOS	 	;TRY TO FIND A FILE
  C862   C041           	MOV	R1,R1	 	;SUCCESS ?
  C864   1108           	JLT	ERAE		;NO FILES ON DISC
  C866   0202 0013      	LI	R2,ERAFIL 		;PURGE IF ALREADY EXITS
  C86A   0203 CFD4      	LI	R3,FCB
  C86E   2DA0 D100      	CALL	@BDOS
  C872   C041           	MOV	R1,R1	 	;WRITE ERROR ?
  C874   1117           	JLT	MKERR2	 	;YES
  C876   04C1           ERAE	CLR	R1		;RETURN CODE FOR SHELL
  C878   0460 C4F8      	B	@RETURN		;NEED TO CALL SHELL INIT BECAUSE WE HAVE ALTERED WP
                        
                        ;
                        ;*****************************************************************
                        ;
                        ;	OUTPUT A TEXT FILE TO THE CONSOLE
                        ;	THIS LOADS THE FILE USING .FILENAME AND THEN SENDS IT TO THE CONSOLE
                        ;
                        ;*****************************************************************
                        ;
  C87C   0460 C4F8      TYPEFILE:	B	@RETURN
                        
                        ;
                        ;  ERROR MESSAGES
                        ;
  C880   2FA0 C948      WRITERR	MESG	@ERRMSG4
  C884   100F           	JMP	MKERR2
  C886   0460 F000      MKERR	B	@MONITOR
  C88A   2FA0 C938      	MESG	@ERRMSG3
  C88E   100A           	JMP	MKERR2
  C890   2FA0 C918      CLOSERR	MESG	@ERRMSG1		;IF WE DONT CLOSE UNUSED BLOCKS MAY
  C894   1007           	JMP	MKERR2		;BE STILL ALLOCATED
  C896   2FA0 C928      PARSMSG	MESG	@ERRMSG2
  C89A   0460 C520      	B	@NEXTCMD
  C89E   2FA0 C958      LARGERR	MESG	@ERRMSG5
  C8A2   1000           	JMP	MKERR2
                        	
  C8A4   0202 0010      MKERR2	LI	R2,FCLOSE		;TRY TO CLOSE THE FILE
  C8A8   0203 CFD4      	LI	R3,FCB
  C8AC   2DA0 D100      	CALL	@BDOS
  C8B0   0460 C4F8      	B	@RETURN;
                        ;
                        ;
                        ; CONVERT ASCII TO DECIMAL
                        ;
  C8B4   04C3           ATOD	CLR	R3	 		;PRESET VALUE
  C8B6   0208 000A      	LI	R8,10	 		;BASE 
  C8BA   C020 C5E0      ATOD00	MOV	@BUFPNT,R0	 		;
  C8BE   D090           	MOVB	*R0,R2	 		;GET CHAR
  C8C0   0982           	SRL	R2,8	 		;
  C8C2   0222 FFD0      	AI	R2,-'0' 		;REMOVE ASCII BIAS
  C8C6   1103           	JLT	ATOD03	 		;NOT VALID
  C8C8   0282 000A      	CI	R2,10	 		;
  C8CC   1102           	JLT	ATOD04	 		;OKAY
  C8CE   C043           ATOD03	MOV	R3,R1	 		;ANSWER
  C8D0   2DC0           	RET
  C8D2   C002           ATOD04	MOV	R2,R0
  C8D4   C083           	MOV	R3,R2
  C8D6   3888           	MPY	R8,R2
  C8D8   A0C0           	A	R0,R3
  C8DA   05A0 C5E0      	INC	@BUFPNT 
  C8DE   10ED           	JMP	ATOD00
                        ;
                        ;	CONVERT ALPHA TO HEX
                        ;
  C8E0   04C2           CATOH	CLR	R2
  C8E2   C020 C5E0      LOOP	MOV	@BUFPNT,R0
  C8E6   04C1           	CLR	R1
  C8E8   D050           	MOVB	*R0,R1
  C8EA   0281 3000      	CI	R1,'0'*256
  C8EE   1A12           	JL	NOTHEX
  C8F0   0281 3900      	CI	R1,'9'*256
  C8F4   1208           	JLE	GOTONE
  C8F6   0281 4100      	CI	R1,'A'*256
  C8FA   1A0C           	JL	NOTHEX
  C8FC   0281 4600      	CI	R1,'F'*256
  C900   1B09           	JH	NOTHEX
  C902   0221 0900      	AI	R1,0900H
  C906   0A41           GOTONE	SLA	R1,4
  C908   09C1           	SRL	R1,12
                        ;
                        ;	DIGIT TO ACCUMULATOR
                        ;
  C90A   0A42           	SLA	R2,4
  C90C   A081           	A	R1,R2
  C90E   05A0 C5E0      	INC	@BUFPNT
  C912   10E7           	JMP	LOOP
                        ;
  C914   C042           NOTHEX	MOV	R2,R1
  C916   2DC0           	RET
                        ;
                        ;*****************************************************
                        ; MESSAGES
                        ;
                        ;****************************************************
  C918   2D2D 436C      ERRMSG1	TEXT	'--Close error'
  C91C   6F73 6520      
  C920   6572 726F      
  C924   72             
  C925   0D0A 00        	BYTE	0DH,0AH,0
  C928                  	EVEN
  C928   2D2D 5061      ERRMSG2 TEXT	'--Parse error'
  C92C   7273 6520      
  C930   6572 726F      
  C934   72             
  C935   0D0A 00        	BYTE	0DH,0AH,0
  C938                  	EVEN
  C938   2D2D 4D61      ERRMSG3 TEXT	'--Make error'
  C93C   6B65 2065      
  C940   7272 6F72      
  C944   0D0A 00        	BYTE	0DH,0AH,0
  C947   00             	EVEN
  C948   2D2D 5772      ERRMSG4 TEXT	'--Write error'
  C94C   6974 6520      
  C950   6572 726F      
  C954   72             
  C955   0D0A 00        	BYTE	0DH,0AH,0
  C958                  	EVEN
  C958   2D2D 4669      ERRMSG5 TEXT	'--File too large error'
  C95C   6C65 2074      
  C960   6F6F 206C      
  C964   6172 6765      
  C968   2065 7272      
  C96C   6F72           
  C96E   0D0A 00        	BYTE	0DH,0AH,0
  C971   00             	EVEN
                        ;	
                        ;*******************************************************
                        ;
                        ;	PROCEDURE INPUT
                        ;
                        ;******************************************************
                        ;
  C972   0204 0040      PFETCH	LI	R4,CLSZ
  C976   C804 CC54      	MOV	R4,@CMDBYTES			;BYTES LEFT IN CMDLINE
  C97A   0204 CC6A      	LI	R4,CMDLINE	 		;NEXT CMDLINE DEST ADDR
  C97E   C804 CC52      	MOV	R4,@CMDADDR	
  C982   04E0 CC64      	CLR	@SUBFLAG	
                        ;
                        ;	IS A NEW SECTOR NEEDED?
                        ;
  C986   C120 CED6      PLOOP	MOV	@MCNT,R4	 		;CHARS LEFT IN BUFFER
  C98A   1626           	JNE	BUFMOVE	 		;YES, MOVE NEXT CHAR
                        ;
                        ;ANY	MORE	SECTORS	IN THE FILE
                        ;
  C98C   C120 CCC2      	MOV	@MFSZ,R4	
  C990   1321           	JEQ	PROCERR1			;NO,END OF FILE
                        ;
                        ;READ	NEXT	SECTOR
                        ;
  C992   0203 0000      	LI	R3,DEFDRV
  C996   0202 000E      	LI	R2,SELDSK
  C99A   2DA0 D100      	CALL	@BDOS	 
  C99E   0203 CCD4      	LI	R3,MBUF	 			;USE THIS BUFFER
  C9A2   0202 001A      	LI	R2,SETDMA
  C9A6   2DA0 D100      	CALL	@BDOS	
  C9AA   0203 CFD4      	LI	R3,FCB	
  C9AE   0202 0014      	LI	R2,RDSEQ	 		;READ 1 SECTOR<--
  C9B2   2DA0 D100      	CALL	@BDOS		 		;
  C9B6   C041           	MOV	R1,R1	 			;TROUBLE ?
  C9B8   110B           	JLT	PROCERR0	 		;YES
  C9BA   0201 0200      	LI	R1,BLKSIZ	 		;INIT MCNT
  C9BE   C801 CED6      	MOV	R1,@MCNT	 		;
  C9C2   0204 CCD4      	LI	R4,MBUF	 			;INIT NEXT BUFFER ADDR
  C9C6   C804 CED8      	MOV	R4,@MADDR	
  C9CA   0620 CCC2      	DEC	@MFSZ	 			;DECR PROC FILE SIZE(SECTORS LEFT)
  C9CE   1004           	JMP	BUFMOVE	
  C9D0   0460 CB04      PROCERR0	B	@SHELLERR	
  C9D4   0460 CB26      PROCERR1	B	@UNPROC	
                        ;
                        ;-----MOVE NEXT	BYTE TO CMDLINE FROM PROC BUFFER
                        ;
  C9D8   C120 CED8      BUFMOVE	MOV	@MADDR,R4	
  C9DC   D074           	MOVB	*R4+,R1	
  C9DE   C804 CED8      	MOV	R4,@MADDR	
  C9E2   0620 CED6      	DEC	@MCNT	 		;DECR MCNT
  C9E6   2E01           	PUSH	R1	 		;PUSH R1
  C9E8   C020 CC64      	MOV	@SUBFLAG,R0			;PREV CHAR A SUBSTITUTION MARKER? 
  C9EC   1621           	JNE	PARMSUB	 		;YES
  C9EE   2E41           	POP	R1			;NO 
  C9F0   9801 C316      	CB	R1,@SUBMARK	 		;THIS CHAR A SUB MARKER?
  C9F4   1603           	JNE	BUFMOV2	 		;NO
  C9F6   0720 CC64      	SETO	@SUBFLAG	 		;YES,SET FLAG
  C9FA   10C5           	JMP	PLOOP	 		;AND CONTINE
  C9FC   9801 C30F      BUFMOV2	CB	R1,@EOF	 		;PDS EOF FLAG?
  CA00   1313           	JEQ	BUFMOV4			;YES,EOF
  CA02   9801 0000      	CB	R1,@PAD	 		;SMALL-VM PAD CHAR?
  CA06   1310           	JEQ	BUFMOV4			;YES,EOF
  CA08   9801 C30D      BUFMOV3	CB	R1,@LF	 		;LF?
  CA0C   13BC           	JEQ	PLOOP	 		;YES,IGNORE IT
  CA0E   C120 CC52      BUFPUT	MOV	@CMDADDR,R4	 	;NEXT CMDLINE ADDR
  CA12   D501           	MOVB	R1,*R4	
  CA14   9801 C30C      	CB	R1,@CR	 		;CR?
  CA18   1331           	JEQ	PEOL	 		;YES,CMD IS FETCHED
  CA1A   0584           	INC	R4	
  CA1C   C804 CC52      	MOV	R4,@CMDADDR	
  CA20   0620 CC54      	DEC	@CMDBYTES	 	;CMDLINE BYTES LEFT
  CA24   1303           	JEQ	MOVERR	  		;NO SPACE LEFT,ABORT PROC
  CA26   10AF           	JMP	PLOOP	 		;YES,GO FOR NEXT BYTE
  CA28   0460 CB26      BUFMOV4	B	@UNPROC	
  CA2C   0460 CAF4      MOVERR	B	@LINERR	
                        ;
                        ;----PARAMETER	SUB(R1	ON	TOP OF STACK)
                        ;
  CA30   04E0 CC64      PARMSUB	CLR	@SUBFLAG	 		;CLEAR SUB FLAG
  CA34   2E41           	POP	R1	 		;FETCH CAHR FOLLOWING SUBST MARKER
  CA36   2E01           	PUSH	R1	 		;AND SAVE IT AGAIN
  CA38   0981           	SRL	R1,8	
  CA3A   0221 FFE0      	AI	R1,0FFE0H		;REDUCE ASCII BYTE TO INTEGER(-30)
  CA3E   1119           	JLT	NOSUB	 		;LT ZERO
  CA40   0281 000A      	CI	R1,10	
  CA44   1516           	JGT	NOSUB	 		;GT 9
  CA46   C081           	MOV	R1,R2	 		;PPTR OFFSET
  CA48   2E41           	POP	R1	 		;WASTE TOP OF STACK
  CA4A   0204 CF7C      	LI	R4,PPTRS	 		;1ST PPTR ADDR
  CA4E   C0D4           SUBLOOP	MOV	*R4,R3	 		;R3=NEXT PPTR
  CA50   1312           	JEQ	NULLPARM	
  CA52   0602           	DEC	R2	
  CA54   15FC           	JGT	SUBLOOP	
                        ;
                        ;-PPTR	FOUND
                        ;
  CA56   D053           SUBLOOP2	MOVB	*R3,R1	 	;FETCH NEXT PARM CHAR
  CA58   9060 C309      	CB	@SPACE,R1	 	;END OF PARM(LE SPACE)?
  CA5C   1194           	JLT	PLOOP	 		;YES,CONTINUE
  CA5E   0583           	INC	R3	 		;BUMP PARM BYTE ADDR
  CA60   C120 CC52      	MOV	@CMDADDR,R4	 		;STORE BYTE IN CMDLINE
  CA64   DD01           	MOVB	R1,*R4+	 		;ALSO BUMP BYTE ADDR
  CA66   C804 CC52      	MOV	R4,@CMDADDR	
  CA6A   0620 CC54      	DEC	@CMDBYTES	 		;DECR BYTES LEFT IN CMDLINE
  CA6E   1342           	JEQ	LINERR	 		;NO SPACE LEFT,ABORT PROC!
  CA70   10F2           	JMP	SUBLOOP2	
                        ;
                        ;NON-NUMERIC	CHAR	FOLLOWS	SUBSTITUTION MARKER
                        ;--TREAT	NORMAL
                        ;
  CA72   2E41           NOSUB	POP	R1	 		;RESTORE CHAR
  CA74   10C3           	JMP	BUFMOV2	 		;AND CONTINUE
                        ;
                        ;-NO	PARAMETER	GIVEN	FOR SUBSTITUTION
                        ;--SUB	NULL	STRING
                        ;
  CA76   0201 0A00      NULLPARM	LI	R1,0A00H 			;FORCE BYTE TO BE SKIPPED
  CA7A   10C6           	JMP	BUFMOV3	
                        ;
                        ;----END OF PROCEDURE LINE
                        ;
  CA7C   D060 CC6A      PEOL	MOVB	@CMDLINE,R1	
  CA80   9060 C310      	CB	@COMT,R1	 		;COMMENT?
  CA84   1330           	JEQ	BPFETCH	 		;YES,IGNORE IT
  CA86   9060 C314      	CB	@NOTE,R1	 		;OPERATOR NOTE?
  CA8A   1303           	JEQ	VIEW	 		;YES, DISPLAY THE LINE
  CA8C   C060 CC60      	MOV	@VSW,R1	 		;VIEW SWITCH SET?
  CA90   1304           	JEQ	CKNSW	 		;NO
  CA92   0204 CC6A      VIEW	LI	R4,CMDLINE	 		;YES
  CA96   2DA0 CC44      	CALL	@OUTSTR	
                        ;
  CA9A   C060 CC62      CKNSW	MOV	@NSW,R1	 		;NO-EXECUTE SWITCH SET?
  CA9E   1623           	JNE	BPFETCH	 		;YES,GO FOR NEXT COMMAND LINE
  CAA0   D060 CC6A      	MOVB	@CMDLINE,R1	 		;OPERATOR NOTE?
  CAA4   9060 C314      	CB	@NOTE,R1	
  CAA8   1620           	JNE	BTDOCMD	 		;NO;PROCESS THE COMMAND LINE
  CAAA   0204 CC6A      	LI	R4,CMDLINE	
  CAAE   0584           	INC	R4	
  CAB0   9814 C314      	CB	*R4,@NOTE			;OPERATOR RESPONCE?
  CAB4   1618           	JNE	BPFETCH			;NO
  CAB6   0204 CF6E      WAIT	LI	R4,WAITMSG	
  CABA   2DA0 CC44      	CALL	@OUTSTR
  CABE   04C1           	CLR	R1			;WAIT FOR A RESPONCE
  CAC0   2DA0 0001      	CALL	@CIN			;<---
  CAC4   2E01           	PUSH	R1			;ECHO CR,LF
  CAC6   D0E0 C30C      	MOVB	@CR,R3	
  CACA   2DA0 CC1C      	CALL	@OUTCHAR	
  CACE   2E41           	POP	R1	
  CAD0   9801 C30C      	CB	R1,@CR			;CR?
  CAD4   1308           	JEQ	BPFETCH			;YES,CONTINE
  CAD6   9801 C304      	CB	R1,@CTLC			;^C?
  CADA   1325           	JEQ	UNPROC			;YES,ABORT PROC
  CADC   9801 C306      	CB	R1,@CTLS			;^S?
  CAE0   16EA           	JNE	WAIT			;NO,KEEP WAITING
  CAE2   0720 CC5E      	SETO	@SKIPSW			;SET SKIP SWITCH 
  CAE6   0460 C972      BPFETCH	B	@PFETCH			;FETCH NEXT PROC COMMAND 
  CAEA   0460 C378      BTDOCMD	B	@DOCMD	
                        ;
                        ;-----ERROR	ROUTINES
                        ;
  CAEE   0204 CC6A      CMDERR	LI	R4,CMDLINE	
  CAF2   1014           	JMP	ERROUT	
  CAF4   C0A0 C30C      LINERR	MOV	@CR,R2	
                        	;CALL	@OUTCHAR	
  CAF8   0204 CF4D      	LI	R4,LINEMSG	
  CAFC   100F           	JMP	ERROUT	
  CAFE   0204 CF37      PARMERR	LI	R4,PARMSG	
  CB02   100C           	JMP	ERROUT	
  CB04   0204 CF25      SHELLERR	LI	R4,SHELLMSG
  CB08   1009           	JMP	ERROUT	
  CB0A   0204 CF5D      HARDERR	LI	R4,HARDMSG	
  CB0E   1006           	JMP	ERROUT	
  CB10   0204 CF0A      NULLERR	LI	R4,NULLMSG	
  CB14   1003           	JMP	ERROUT	
  CB16   0204 CF0D      NESTERR	LI	R4,NESTMSG	
  CB1A   1000           	JMP	ERROUT	 
                        ERROUT
  CB1C   2FA0 CF0B      	MESG	@QUESTMSG
  CB20   2F94           	MESG	*R4
  CB22   2FA0 C62A      	MESG	@CRLF
                        ;
                        ;-----TERMINATE	PROCEDURE	PROCESSING
                        ;
  CB26   04E0 CC5C      UNPROC	CLR	@PROCSW	 		;CLEAR SWITCH 
  CB2A   0204 C390      	LI	R4,CHKSYS	 	; 
  CB2E   05C4           	INCT	R4	 		;POINT TO COMPARE WORD
  CB30   D520 C317      	MOVB	@SYSFILE,*R4		;REJECT FUTURE SYS FILE REFS
  CB34   0460 C4F8      	B	@RETURN	 		;RESETS SP & GOES TO PROMPT
                        ;
                        ;----INITIATE	PROCEDURE	PROCESSING
                        ;
  CB38   C060 CC5C      DOPROC	MOV	@PROCSW,R1	 		;ALREADY IN A PROC?
  CB3C   16EC           	JNE	NESTERR	 		;YES,BUT CAN'T NEST THEM
  CB3E   0701           	SETO	R1	 		;NO,SET PROC SWITCH
  CB40   C801 CC5C      	MOV	R1,@PROCSW	
  CB44   0203 CFD4      	LI	R3,FCB			;SET PROC FDE FIELDS
  CB48   0204 CCB2      	LI	R4,MNAM			;DEST 
  CB4C   0202 0010      	LI	R2,16			; 
  CB50   2DA0 CC08      	CALL	@BMOVE	
  CB54   04C4           	CLR	R4	 		;FORCE FIRST DISK READ
  CB56   C804 CED6      	MOV	R4,@MCNT	
                        ;
                        ;---PARSE	PROCEDURE	PARAMETERS
                        ;
  CB5A   04E0 CC60      	CLR	@VSW	 		;CLEAR VIEW SWITCH
  CB5E   04E0 CC62      	CLR	@NSW	 		;CLEAR NO-EXECUTE SWITHC
  CB62   0204 CF7C      	LI	R4,PPTRS	 		;INIT PPADDR
  CB66   C804 CFD2      	MOV	R4,@PPADDR	
  CB6A   0203 CF92      	LI	R3,PBUF	 		;INIT DEST ADDR (R3)
  CB6E   0204 CC6A      	LI	R4,CMDLINE	 		;INIT SOURCE ADDR (R4)
  CB72   0202 000A      	LI	R2,10	 		;MAX PARMS ALLOWED 
  CB76   04C0           	CLR	R0	 		;R0 = WORD SWITCH(ZERO BETWEEN WORDS)
  CB78   04C1           PARSLOOP	CLR	R1	
  CB7A   D074           	MOVB	*R4+,R1			;LOAD NEXT BYTE
  CB7C   0281 2D00      	CI	R1,2D00H 		;CMD LINE SWITCH(-)?
  CB80   161A           	JNE	PARS1	 		;NO
  CB82   C000           	MOV	R0,R0	 		;BEGINNING OF WORD?
  CB84   1616           	JNE	PARS0B	 		;NO,CONTINUE
  CB86   0584           	INC	R4	
  CB88   D054           	MOVB	*R4,R1	 		;TEST 3RD BYTE
  CB8A   0604           	DEC	R4	
  CB8C   0281 2000      	CI	R1,2000H 		;SPACE OR CTL CHAR?
  CB90   1B10           	JH	PARS0B	 		;NO,CONTINUE
  CB92   D054           	MOVB	*R4,R1	 		;TEST 2ND BYTE
  CB94   0281 5600      	CI	R1,5600H 		;-V?
  CB98   1604           	JNE	PARS0A	 		;NO
  CB9A   C801 CC60      	MOV	R1,@VSW	 		;YES,SET VIEW SWITCH
  CB9E   0584           PARS0	INC	R4	 		;AND DROP SWITCH FROM THE COMMAND
  CBA0   10EB           	JMP	PARSLOOP	
  CBA2   0281 4E00      PARS0A	CI	R1,4E00H 		;-N?
  CBA6   1605           	JNE	PARS0B	 		;NO-CONTINUE
  CBA8   0201 2D00      	LI	R1,2D00H 		;RESTORE CHAR
  CBAC   C801 CC62      	MOV	R1,@NSW	 		;YES-SET NO EXECUTE SWITCH
  CBB0   10F6           	JMP	PARS0	 		;
  CBB2   0201 2D00      PARS0B	LI	R1,2D00H		;RESTORE CHAR 
                        ;
                        ;
  CBB6   DCC1           PARS1	MOVB	R1,*R3+	
  CBB8   0281 0D00      	CI	R1,0D00H 		;END OF LINE?
  CBBC   1321           	JEQ	PARSEND	 		;YES
  CBBE   0281 2000      	CI	R1,2000H 		;SPACE OR CTL CHAR?
  CBC2   1B04           	JH	PARS2	 		;NO
  CBC4   C000           	MOV	R0,R0	 		;YES,WORD SWITCH CLEAR?
  CBC6   13D8           	JEQ	PARSLOOP	 		;YES,CONTINUE
  CBC8   04C0           	CLR	R0	 		;NO,CLEAR IT AND CONTINUE
  CBCA   10D6           	JMP	PARSLOOP	
                        ;
  CBCC   C000           PARS2	MOV	R0,R0	 		;IS WORD SWITCH SET?
  CBCE   16D4           	JNE	PARSLOOP	 		;YES,CONTINUE
  CBD0   0700           	SETO	R0			;NO,SET IT
  CBD2   0602           	DEC	R2	 		;WILL NEXT PARM FIT PPTRS ARRAY?
  CBD4   1194           	JLT	PARMERR	 		;NO
                        ;
                        ;	LOAD NEXT PARM PTR
                        ;
  CBD6   2E04           	PUSH	R4	 		;SOURCE
  CBD8   2E03           	PUSH	R3	 		;DEST
  CBDA   0603           	DEC	R3	
  CBDC   D054           	MOVB	*R4,R1			;2ND SOURCE CHAR<=SPACE?
  CBDE   0281 2000      	CI	R1,2000H	
  CBE2   1506           	JGT	PARS3	 		;NO CAN'T BE NULL PARAMETER
  CBE4   9813 C312      	CB	*R3,@NULPARM			;1ST DEST CHAR A NULL PARAMETER?
  CBE8   1603           	JNE	PARS3	 		;NO
  CBEA   0201 2000      	LI	R1,2000H 		;YES,FORCE PARM DELIMITER
  CBEE   D4C1           	MOVB	R1,*R3	
  CBF0   C120 CFD2      PARS3	MOV	@PPADDR,R4	 
  CBF4   CD03           	MOV	R3,*R4+	
  CBF6   C804 CFD2      	MOV	R4,@PPADDR	
  CBFA   2E43           	POP	R3	 		;DEST
  CBFC   2E44           	POP	R4	 		;SOURCE
  CBFE   10BC           	JMP	PARSLOOP	
                        ;
                        ;-----TERMINATE	PARSING
                        ;
  CC00   04E0 CFD2      PARSEND	CLR	@PPADDR			;CAP PPTRS WITH A NULL WORD
  CC04   0460 C972      	B	@PFETCH	 		;GO PROCESS THE PROC
                        ;
                        ;----BLOCK	MOVE	ROUTINE
                        ;
  CC08   DD33           BMOVE	MOVB	*R3+,*R4+	
  CC0A   0602           	DEC	R2	
  CC0C   16FD           	JNE	BMOVE	
  CC0E   2DC0           	RET	
                        ;
                        ;INPUT	CHAR INTO MSB OF R1
                        ;
  CC10   0202 0001      INCHAR	LI	R2,CIN	 		; 
  CC14   2DA0 D100      	CALL	@BDOS	 		;GET CHAR
  CC18   06C1           	SWPB	R1			;PLACE CHAR IN MSB
  CC1A   2DC0           	RET	 		;
                        ;
                        ;	
                        ;   OUTPUT CHAR IN MSB OF R3 TO THE CONSOLE
                        ;   CHARACTER RETURNED IN MSB OF R1
                        ;   AUTO LF
                        ;
  CC1C   2E03           OUTCHAR	PUSH	R3			;SAVE CHAR
  CC1E   06C3           	SWPB	R3		;DOS PRINTS LSB BYTE
  CC20   0202 0002      	LI	R2,COUT	 		;
  CC24   2DA0 D100      	CALL	@BDOS
  CC28   2E43           	POP	R3
  CC2A   9803 C30C      	CB	R3,@CR	 		;CR?
  CC2E   1609           	JNE	OUT0	 		;NO
  CC30   D0E0 C30D      	MOVB	@LF,R3	 		;YES,GENERATE LF
  CC34   06C3           	SWPB	R3			;DOS PRINTS LSB BYTE
  CC36   0202 0002      	LI	R2,COUT
  CC3A   2DA0 D100      	CALL	@BDOS
  CC3E   0203 0D0A      	LI	R3,0D0AH			;DONE FOR SHELL
  CC42   2DC0           OUT0	RET
                        ;
                        ;----OUTPUT	A STRING TO THE CONSOLE
                        ;
  CC44   D0D4           OUTSTR	MOVB	*R4,R3
                        ;	SRL	R3,8 
  CC46   1304           	JEQ	STR0	
  CC48   0584           	INC	R4	
  CC4A   2DA0 CC1C      	CALL	@OUTCHAR	
  CC4E   10FA           	JMP	OUTSTR	
  CC50   2DC0           STR0	RET
                        ;
                        ;
                        ;----MISC	VARIABLES
                        ;
  CC52   0000           CMDADDR	WORD	0			;CUR CMDLINE ADDR
  CC54   0000           CMDBYTES	WORD	0	 		;CMDLINE BYTES LEFT
  CC56   0000           DOSV	WORD	0	 		;DOS WARM START VECTOR
  CC58   0000           HDERRV	WORD	0	 		;DOS HARD ERROR VECTOR
  CC5A   0000           DOSERRV	WORD	0	 		;DOS FILENAME ERROR VECTOR
  CC5C   0000           PROCSW	WORD	0			;PROC SWITCH
  CC5E   0000           SKIPSW	WORD	0			;SKIP NEXT PROC CMD
  CC60   0000           VSW	WORD	0			;VIEW SWITCH
  CC62   0000           NSW	WORD	0			;NO-EXECUTE SWITCH
  CC64   0000           SUBFLAG	WORD	0	 		;PARM SUBST FLAG
  CC66   0000           LADDR	WORD	0	;
                        ;
                        ;-----SHELL COMMAND LINE
                        ;
  CC68   0000           VMENTRY	WORD	0			;CONTROLS SMALL-VM PROG REENTRY FEATURE
  CC6A   2A42 4F4F      CMDLINE	TEXT	"*BOOT"
  CC6E   54             
  CC6F   0D00           	BYTE	0DH,00
  CC71                  	BSS	CLSZ	 		;COMMAND BUFF
  CCB1   00             	EVEN
                        
                        	
                        ;
                        ;
                        ;----PROCEDURE	FDE & BUFFER FIELDS 
                        ;
  CCB2                  	EVEN
  CCB2                  MNAM	BSS	NAMSIZ			; 	 
  CCBD                  	BSS	2	 		;RIB
  CCBF   00             	EVEN		   
                        ;
  CCC0   0000           MFTY	WORD	0			;
  CCC2   0000           MFSZ	WORD	0			;SECTORS REMAINING 
  CCC4   0000           MNRR	WORD	0	 		;NRR
  CCC6   0000           MCBF	WORD	0
  CCC8   0000           MTSC	WORD	0
  CCCA   0000           MDRV	WORD	0	 		;DRIVE #
  CCCC                  	BSS	8			;PART OF FRI (SPARE)	
  CCD4                  MBUF:	BSS	BUFFSIZ+2			;PROC BUFFER 1 SECTOR
  CED6   0000           MCNT	WORD	0			;BYTES LEFT IN BUFFER
  CED8   0000           MADDR	WORD	0			;CURRENT BUFFER BYTE ADDR 
                        ;
                        ;----MESSAGES
                        ;
  CEDA   0D0A           SINON	BYTE	0DH,0AH
  CEDC   5368 656C      	TEXT	'Shell Version 4.1'
  CEE0   6C20 5665      
  CEE4   7273 696F      
  CEE8   6E20 342E      
  CEEC   31             
  CEED   0D0A           	BYTE	0DH,0AH
  CEEF   5265 6C65      	TEXT	'Release date 28 August 24'
  CEF3   6173 6520      
  CEF7   6461 7465      
  CEFB   2032 3820      
  CEFF   4175 6775      
  CF03   7374 2032      
  CF07   34             
  CF08   0D0A           	BYTE	0DH,0AH
  CF0A   00             NULLMSG 	BYTE 	0
                        ;
  CF0B   3F             QUESTMSG 	TEXT 	"?"
  CF0C   00             	BYTE	0
                        ;
  CF0D   5072 6F67      NESTMSG	TEXT	"Program name expected:"
  CF11   7261 6D20      
  CF15   6E61 6D65      
  CF19   2065 7870      
  CF1D   6563 7465      
  CF21   643A           
  CF23   0D00           	BYTE 	0DH,00
                        ;
  CF25   5368 656C      SHELLMSG 	TEXT 	"Shell error:"
  CF29   6C20 6572      
  CF2D   726F 723A      
  CF31   0D00           	BYTE	0DH,00H
                        ;
  CF33   0820 0800      RUBMSG	BYTE	08H,20H,08H,0
                        ;
  CF37   546F 6F20      PARMSG	TEXT	"Too many parameters:"
  CF3B   6D61 6E79      
  CF3F   2070 6172      
  CF43   616D 6574      
  CF47   6572 733A      
  CF4B   0D00           	BYTE	0DH,00
                        ;
  CF4D   4C69 6E65      LINEMSG	TEXT	"Line too long:"
  CF51   2074 6F6F      
  CF55   206C 6F6E      
  CF59   673A           
  CF5B   0D00           	BYTE	0DH,00
                        ;
  CF5D   4841 5244      HARDMSG	TEXT	"HARD DISK ERROR"
  CF61   2044 4953      
  CF65   4B20 4552      
  CF69   524F 52        
  CF6C   0D00           	BYTE	0DH,00
                        ;
  CF6E   2D2D 7761      WAITMSG	TEXT	"--waiting..."
  CF72   6974 696E      
  CF76   672E 2E2E      
  CF7A   00             	BYTE	0
                        ;
                        ;----PARAMETER	POINTERS,BUFFER	ETC.
                        ;
  CF7B   00             	EVEN
  CF7C                  PPTRS	BSS	22	 	;11 WORDS 
  CF92                  PBUF	BSS	64	 	;PARM BUUFER 
  CFD2   0000           PPADDR	WORD	0		;ADDR OF CUR PARM PTR
                        ;WORKSP	BSS	32		;GENERAL SHELL WORKSPACE PASSED ONTO LOADED PROGRAMMES SO THAT THEY CAN RETURN
  CFD4                  FCB	BSS	36 		;FCB MUST BE 36 BYTES LONG
                        ;
                        ;XOP0:	MOV	@2*R10(WP),R10		;GET SP
                        ;	DECT	SP		;DECREMENT STACK POINTER
                        ;	MOV	R14,*R10		;PUSH RETURN ADDRESS
                        ;	MOV	SP, @2*R10(WP)		;UPDATE STACK
                        ;	LWPI	WP		;LOAD CALLING WP
                        ;	B	@BDOSV
  CFF8                  	END	

No error(s).
LOOKERR          C46C  SP               000A  MNAM             CCB2  GOLOOP           C4DE  
OUT0             CC42  CINLOOP          C53A  EXIT             C7F2  DLOOK1           C3E2  
CCOUNT           C638  DLOOK2           C3EA  PARMSG           CF37  DLOOK3           C414  
FTY              000B  DLOOK4           C41C  MOVERR           CA2C  DLOOK5           C40C  
NULLMSG          CF0A  DLOOK6           C400  R10              000A  DLOOK7           C408  
ERA0             C810  FCB              CFD4  ERA2             C84A  EXTSIZ           0003  
ERA4             C856  FSB              000C  MNOFILE          C62D  R12              000C  
DSKSAVE          C6D8  OUTSTR           CC44  NAM0             C734  LOAD4            C484  
NAM2             C754  MFTY             CCC0  NAM1             C748  SINON            CEDA  
NAM4             C74C  PLOOP            C986  ERAE             C876  PNAME            C680  
PARS2            CBCC  MONITOR          F000  DSKDIR           C63A  SUBFLAG          CC64  
SADDR            C5E4  LOAD0            C4A0  LOOK             C3D2  BMOVE            CC08  
VIEW             CA92  WRDATA           C7BA  BTDOCMD          CAEA  MEMLIMIT         00B0  
DCOMR            0001  PNAME1           C692  JUMP             C311  PNAME2           C698  
DOSV             CC56  PNAME3           C6BE  DSKDIR1          C66A  EXT              C313  
WRITE            2F00  NULPARM          C312  RUBOUT           C59C  OUTCHAR          CC1C  
CMDL_SIZE        00A2  PARS0            CB9E  ERRMSG4          C948  SKIPSW           CC5E  
ICMD2            C618  PROMPT           C52A  SHELLMSG         CF25  GO               C4F4  
R0               0000  BPFETCH          CAE6  R2               0002  TPA              0500  
R4               0004  BLKSIZ           0200  R6               0006  BUFPNT           C5E0  
R9               0009  PARS0A           CBA2  RDSEQ            0014  BDOSV            0084  
CTLC             C304  PARS0B           CBB2  EOF              C30F  PARMERR          CAFE  
CTLS             C306  CR               C30C  CTLX             C305  CBN              0018  
CTLZ             C308  PARSERR          C6D4  POP              2E40  BUFMOV4          CA28  
FLA              0010  PARSLOOP         CB78  INIT22           C344  CIN              0001  
MESG             2F80  QUESTMSG         CF0B  WAIT             CAB6  STOWIT           C55C  
SELDSK           000E  MADDR            CED8  BUFPUT           CA0E  CRN              001A  
ATOD00           C8BA  NAMSRCH          C778  ATOD04           C8D2  RUBMSG           CF33  
PROCSW           CC5C  LARGERR          C89E  CMDERR           CAEE  RET              2DC0  
STRT01           C716  CHKSYS           C390  PUSHREG          2D00  NOTHEX           C914  
PAD              0000  NOSUB            CA72  VSW              CC60  BUFFSIZ          0200  
NULLPARM         CA76  NESTMSG          CF0D  BS               C30B  BDOS             D100  
NESTERR          CB16  ERRMSG2          C928  LADDR            CC66  WORKSP           0230  
ERRMSG5          C958  CATOH            C8E0  GOPROG           C4D4  RECCNT           C5E2  
WAITMSG          CF6E  ICMD0            C5F4  SYSFILE          C317  HDERR            0000  
SUBLOOP          CA4E  DOPROC           CB38  COMT             C310  HARDERR          CB0A  
STR0             CC50  BUFMOVE          C9D8  SUBLOOP2         CA56  START00          C6EC  
R14              000E  ECHO             C58A  LINEMSG          CF4D  LOAD             C470  
EXEC             0002  ICMDE            C624  DEFDRV           0000  NULLERR          CB10  
ERA1             C836  RETURN           C4F8  PROC             0005  MBUF             CCD4  
MDRV             CCCA  STACKP           0500  NAM3             C788  SETDMA           001A  
MNRR             CCC4  HDERRV           CC58  PFETCH           C972  LOAD5            C48A  
MCNT             CED6  NOTE             C314  ERA01            C818  SWITCH           C5E6  
SEARCH2          0012  NEXTCMD          C520  DOSERR           0000  DDEN             0001  
PARMSUB          CA30  UNPROC           CB26  FCLOSE           0010  ERAFILE          C7FC  
POPREG           2D40  DIREXIT          C6C0  R1               0001  LF               C30D  
R5               0005  RELB             001C  MAKFIL           0016  LOAD1            C4C4  
CRLF             C62A  BYTSEC           0200  R15              000F  RELR             001E  
VMENTRY          CC68  CMDPTR           00A0  SPACE            C309  CLOSERR          C890  
LOAD3            C476  PARS1            CBB6  PARSEND          CC00  FREEMEM          00A6  
ATOD03           C8CE  DOCMD2A          C3B0  PARS3            CBF0  DOCMDAA          C3A4  
CMDCNT           0004  SETREG           2C80  BAR              C626  CONSOLE          0000  
DEBUG            2FC0  LINERR           CAF4  BUFMOV3          CA08  SHELLBV          0080  
WP               000D  CKNSW            CA9A  NSW              CC62  ICMD             C5E8  
ERRMSG1          C918  ERROUT           CB1C  PBUF             CF92  CMDBYTES         CC54  
HARDMSG          CF5D  SEARCH1          0011  CMDLINE          CC6A  BUFVECT          00A4  
LOAD2            C498  SHELL            C300  PROM             C315  CLSZ             0040  
ERA3             C84E  ICLIST           C5C6  LOOP             C8E2  FOPEN            000F  
GOTONE           C906  SUBMARK          C316  BUFMOV2          C9FC  DSKDIR0          C650  
MCBF             CCC6  MKERR            C886  R8               0008  CMDADDR          CC52  
START02          C6F4  ERAFIL           0013  FSZ              000E  DOCMD            C378  
MTSC             CCC8  PARSMSG          C896  GODOCMD          C5B4  MKERR2           C8A4  
PPADDR           CFD2  CMDL_PTR         00A0  DEL              C30E  DOSCMD           C318  
INCHAR           CC10  ERRMSG3          C938  PPTRS            CF7C  MLOAD            001B  
PUSH             2E00  DOCMD1           C39A  PEOL             CA7C  DOCMD2           C3AA  
DOSERRV          CC5A  DOCMD3           C3C8  READ             2F40  INIT             C31A  
R3               0003  PROCERR1         C9D4  CTLY             C307  CIOERR           C5C2  
MFSZ             CCC2  DOCMD4           C3B4  COUT             0002  ICMD1            C614  
ATOD             C8B4  DOCMD9           C3CE  NAM              0000  WRDATAC          C7E6  
RHEX             2EC0  ERAPERR          C7F8  CALL             2D80  PROCERR0         C9D0  
WHEX             2E80  NAMSIZ           000B  WRITERR          C880  R11              000B  
WRSEQ            0015  NAM5             C794  SHELLERR         CB04  TYPEFILE         C87C  
STOWIT2          C576  NOFILE           C6CA  
